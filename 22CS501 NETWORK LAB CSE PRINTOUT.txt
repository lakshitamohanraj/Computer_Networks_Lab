Ex No: 3         Simulation of Error Correction Code(CRC)

Program:
import java.io.*; 
class CRC
{
public static void main(String args[]) throws IOException
{
BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
System.out.println("Enter Generator:");
String gen = br.readLine(); System.out.println("Enter Data:"); 
String data = br.readLine();
String code = data;
while(code.length() < (data.length() + gen.length() - 1)) code = code + "0";
code = data + div(code,gen);
System.out.println("The transmitted Code Word is: " + code); 
System.out.println("Please enter the received Code Word: "); 
String rec = br.readLine();
if(Integer.parseInt(div(rec,gen)) == 0)
System.out.println("The received code word contains no errors."); else
System.out.println("The received code word contains errors.");
}

static String div(String num1,String num2)
{
int pointer = num2.length();
String result = num1.substring(0, pointer); String remainder = "";
for(int i = 0; i < num2.length(); i++)
{
if(result.charAt(i) == num2.charAt(i)) remainder += "0";
else
remainder += "1";

}

while(pointer < num1.length())
{
if(remainder.charAt(0) == '0')
{
remainder = remainder.substring(1, remainder.length()); 
remainder = remainder + String.valueOf(num1.charAt(pointer)); 
pointer++;
}
result = remainder; remainder = "";
for(int i = 0; i < num2.length(); i++)
{
if(result.charAt(i) == num2.charAt(i)) remainder += "0";
else
remainder += "1";
}
}
return remainder.substring(1,remainder.length());
}
}











Ex No:	4a	     Implementation of Sliding Window Protocol



PROGRAM:

import java.net.*; 
import java.io.*; import java.rmi.*;
public class slidsender
{
public static void main(String a[])throws Exception
{
ServerSocket ser=new ServerSocket(10); Socket s=ser.accept();
DataInputStream in=new DataInputStream(System.in); 
DataInputStream in1=new DataInputStream(s.getInputStream()); 
String sbuff[]=new String[8];
PrintStream p;
int sptr=0,sws=8,nf,ano,i; String ch;
do
{
p=new PrintStream(s.getOutputStream()); 
System.out.print("Enter the no. of frames : "); 
nf=Integer.parseInt(in.readLine()); p.println(nf); 
if(nf<=sws-1)
{

System.out.println("Enter "+nf+" Messages to be send\n"); 
for(i=1;i<=nf;i++)
{
sbuff[sptr]=in.readLine(); 
p.println(sbuff[sptr]);
sptr=++sptr%8;
}
sws-=nf;
System.out.print("Acknowledgment received"); 
ano=Integer.parseInt(in1.readLine());
System.out.println(" for "+ano+" frames");
 sws+=nf;
}
else
{
System.out.println("The no. of frames exceeds window size"); 
break;
}
System.out.print("\nDo you wants to send some more frames : "); 

ch=in.readLine();
 p.println(ch);
}
while(ch.equals("yes")); s.close();
}
}
RECEIVER PROGRAM
import java.net.*;
 import java.io.*; 
class slidreceiver
{
public static void main(String a[])throws Exception
{
Socket s=new Socket(InetAddress.getLocalHost(),10);
 DataInputStream in=new DataInputStream(s.getInputStream()); 
PrintStream p=new PrintStream(s.getOutputStream());
int i=0,rptr=-1,nf,rws=8; 
String rbuf[]=new String[8]; 
String ch; 
System.out.println(); 
do
{
nf=Integer.parseInt(in.readLine()); 
if(nf<=rws-1)
{
for(i=1;i<=nf;i++)
{
rptr=++rptr%8; rbuf[rptr]=in.readLine();
System.out.println("The received Frame " +rptr+" is : "+rbuf[rptr]);
}
rws-=nf; System.out.println("\nAcknowledgment   sent\n"); 
p.println(rptr+1); rws+=nf; }
else break;
ch=in.readLine();
}
while(ch.equals("yes"));
}
}

OUTPUT:
//SENDER OUTPUT
Enter the no. of frames : 4 Enter 4 Messages to be send
hiii how r u
i am fine
how is evryone
Acknowledgment received for 4 frames

Do you wants to send some more frames : no
//RECEIVER OUTPUT
The received Frame 0 is : hiii The received Frame 1 is : how r u
The received Frame 2 is : i am fine
The received Frame 3 is : how is everyone








Ex.No: 4b		Implementation of Stop and Wait Protocol

PROGRAM:

SENDER PROGRAM

import java.io.*; 
import java.net.*; 
public class Sender
{ 
Socket sender;
ObjectOutputStream out; ObjectInputStream in; 
String packet,ack,str, msg; int n,i=0,sequence=0; Sender()
{
}
public void run()
{
 try
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); 
System.out.println("Waiting for Connection.	");
sender = new Socket("localhost",2004); sequence=0;
out=new ObjectOutputStream(sender.getOutputStream()); 
out.flush();
in=new ObjectInputStream(sender.getInputStream()); 
str=(String)in.readObject(); 
System.out.println("reciver	> "+str); 
System.out.println("Enter the data to send.	");
packet=br.readLine(); n=packet.length();
do{ try{
if(i<n)
{ 
msg=String.valueOf(sequence);
msg=msg.concat(packet.substring(i,i+1));
}
else if(i==n)
{ 
msg="end";out.writeObject(msg);
break;
}
out.writeObject(msg); 
sequence=(sequence==0)?1:0; out.flush();
System.out.println("data sent>"+msg); 
ack=(String)in.readObject(); 
System.out.println("waiting for ack.	\n\n");
if(ack.equals(String.valueOf(sequence)))
{
 i++;
System.out.println("receiver > "+" packet recieved\n\n");
}
else
{
System.out.println("Time out resending data	\n\n");
sequence=(sequence==0)?1:0;
}
}
catch(Exception e)
{
}
}
while(i<n+1);
System.out.println("All data sent. exiting.");
}
catch(Exception e)
{
} 
finally
{
try
{ in.close();
out.close(); sender.close();
}

catch(Exception e){}
}
}
public static void main(String args[])
{ 
Sender s=new Sender();
s.run();
}
}

//RECEIVER PROGRAM

import java.io.*; 
import java.net.*; 
public class Reciever
{ 
ServerSocket reciever;
Socket connection=null; 
ObjectOutputStream out; ObjectInputStream in; 
String packet,ack,data=""; 
int i=0,sequence=0; Reciever(){}
public void run()
{ 
try
{
BufferedReader br=new BufferedReader(new InputStreamReader(System.in)); 
reciever = new ServerSocket(2004,10);
System.out.println("waiting for connection..."); 
connection=reciever.accept();
sequence=0;
System.out.println("Connection established :");
out=new ObjectOutputStream(connection.getOutputStream()); 
out.flush();
in=new ObjectInputStream(connection.getInputStream()); 
out.writeObject("connected	.");
do
{ try{
packet=(String)in.readObject(); 
if(Integer.valueOf(packet.substring(0,1))==sequence)
{ 
data+=packet.substring(1); 
sequence=(sequence==0)?1:0; 
System.out.println("\n\nreceiver	>"+packet);
}
else
{
System.out.println("\n\nreceiver	>"+packet +" duplicate data");
}

if(i<3)
{ 
out.writeObject(String.valueOf(sequence));i++;
}
else
{ 
out.writeObject(String.valueOf((sequence+1)%2)); i=0;
}
}
catch(Exception e){}
}while(!packet.equals("end"));
System.out.println("Data recived="+data); 
out.writeObject("connection ended	.");
}
catch(Exception e){} 
finally{
try
{ 
in.close();
out.close(); 
reciever.close();
}
catch(Exception e){}
}
}
public static void main(String args[])
{ 
Reciever s=new Reciever(); 
while(true)
{
s.run();
}
}
}
OUTPUT:

//SENDER OUTPUT
Waiting for Connection....
reciver > connected	. Enter the data to send....
myname
data sent>0m waiting for ack.....
receiver	> packet recieved data sent>1y
waiting for ack.....
receiver	> packet recieved data sent>0n
waiting for ack.....
receiver	> packet recieved data sent>1a


waiting for ack.....
Time out resending data....
data sent>1a waiting for ack.....
receiver	> packet recieved data sent>0m
waiting for ack.....
receiver	> packet recieved data sent>1e


waiting for ack.....
receiver	> packet recieved All data sent. exiting.


//RECEIVER OUTPUT
waiting for connection...
Connection established : receiver	>0m
receiver	>1y
receiver	>0n
receiver	>1a
receiver	>1a duplicate data receiver	>0m
receiver	>1e
Data recived=myname waiting for connection...









Ex.No: 5		Multi-client chatting in TCP and UDP using Socket programming

PROGRAM:
EchoServer.java import java.net.*; 
import java.io.*; 
public class EServer
{
public static void main(String args[])
{
ServerSocket s=null; String line; 
DataInputStream is; PrintStream ps; Socket c=null;
try
{
s=new ServerSocket(9000);
}
catch(IOException e)
{
 
}
try
{
 
System.out.println(e);
c=s.accept();
is=new DataInputStream(c.getInputStream());
ps=new PrintStream(c.getOutputStream()); 
while(true)
{
line=is.readLine(); ps.println(line);
}
}
catch(IOException e)
{
System.out.println(e);
}
}
}
 
EClient.java 
import java.net.*; 
import java.io.*;
 public class EClient
{	public static void main(String arg[])
{
Socket c=null; String line;
DataInputStream is,is1; 
PrintStream os;
try
{
InetAddress ia = InetAddress.getLocalHost(); 
c=new Socket(ia,9000);
}
catch(IOException e)
{
 
}
try
{
 
System.out.println(e);
os=new PrintStream(c.getOutputStream()); 
is=new DataInputStream(System.in);
is1=new DataInputStream(c.getInputStream()); 
while(true)
{
System.out.println("Client:"); 
line=is.readLine();
os.println(line);
System.out.println("Server:" + is1.readLine());
}
}
catch(IOException e)
{
System.out.println("Socket Closed!");
}
}}




 
OUTPUT
Server
C:\Program Files\Java\jdk1.5.0\bin>javac EServer.java 
C:\Program Files\Java\jdk1.5.0\bin>java EServer 
C:\Program Files\Java\jdk1.5.0\bin>
Client
C:\Program Files\Java\jdk1.5.0\bin>javac EClient.java 
C:\Program Files\Java\jdk1.5.0\bin>java EClient 
Client: Hai Server
Server:Hai Server 
Client: Hello 
Server:Hello 
Client:end 
Server:end Client:ds
Socket Closed!





Ex.No:5(b)		UDP chat

PROGRAM:
UDPserver.java 
import java.io.*; 
import java.net.*; 
class UDPserver
{
public static DatagramSocket ds;
public static byte buffer[]=new byte[1024]; 
public static int clientport=789,serverport=790;
public static void main(String args[])throws Exception
{
ds=new DatagramSocket(clientport); 
System.out.println("press ctrl+c to quit the program");
BufferedReader dis=new BufferedReader(new InputStreamReader(System.in)); 
InetAddress ia=InetAddress.geyLocalHost();
while(true)
{
DatagramPacket p=new DatagramPacket(buffer,buffer.length); ds.receive(p);
String psx=new String(p.getData(),0,p.getLength()); 
System.out.println("Client:" + psx); 
System.out.println("Server:");
String str=dis.readLine(); if(str.equals("end"))
break; buffer=str.getBytes();
ds.send(new DatagramPacket(buffer,str.length(),ia,serverport));
}
}
}
 
UDPclient.java 
import java .io.*; 
import java.net.*; 
class UDPclient
{
public static DatagramSocket ds;
public static int clientport=789,serverport=790;
public static void main(String args[])throws Exception
{
byte buffer[]=new byte[1024]; ds=new DatagramSocket(serverport);
BufferedReader dis=new BufferedReader(new InputStreamReader(System.in)); 
System.out.println("server waiting");
InetAddress ia=InetAddress.getLocalHost(); while(true)
{
System.out.println("Client:"); 
String str=dis.readLine(); if(str.equals("end"))
break; buffer=str.getBytes();
ds.send(new DatagramPacket(buffer,str.length(),ia,clientport)); 
DatagramPacket p=new DatagramPacket(buffer,buffer.length); ds.receive(p);
String psx=new String(p.getData(),0,p.getLength()); 
System.out.println("Server:" + psx);
}
}
}

OUTPUT:
Server

C:\Program Files\Java\jdk1.5.0\bin>javac UDPserver.java 
C:\Program Files\Java\jdk1.5.0\bin>java UDPserver
press ctrl+c to quit the program 
Client:Hai Server
Server:Hello Client 
Client:How are You 
Server:I am Fine

Client

 

C:\Program Files\Java\jdk1.5.0\bin>javac UDPclient.java 
C:\Program Files\Java\jdk1.5.0\bin>java UDPclient 
server waiting

Client:Hai Server
 Server:Hello Clie 
Client:How are You 
Server:I am Fine






Ex.No: 6		Implementation of HTTP, Web Caching, FTP using socket programming


Client

import javax.swing.*; 
import java.net.*;
import java.awt.image.*; 
import javax.imageio.*; 
import java.io.*;
import java.awt.image.BufferedImage; 
import java.io.ByteArrayOutputStream; 
import java.io.File;
import java.io.IOException; 
import javax.imageio.ImageIO;
public class Client
{
public static void main(String args[]) throws Exception
{
 
Socket soc; BufferedImage img = null; soc=new
Socket("localhost",4000); 
System.out.println("Client is running.

try {
System.out.println("Reading image from disk. ");
img = ImageIO.read(new File("digital_image_processing.jpg")); 
ByteArrayOutputStream baos = new ByteArrayOutputStream(); 
ImageIO.write(img, "jpg", baos);
baos.flush();
byte[] bytes = baos.toByteArray(); baos.close(); 
System.out.println("Sending image to server."); 
OutputStream out = soc.getOutputStream(); 
DataOutputStream dos = new DataOutputStream(out); dos.writeInt(bytes.length);
dos.write(bytes, 0, bytes.length); 
System.out.println("Image sent to server. "); dos.close();
out.close();
 
}
catch (Exception e)
{
System.out.println("Exception: " + e.getMessage());
 
soc.close();
}
soc.close();
}
}

Server

import java.net.*; 
import java.io.*;
import java.awt.image.*; 
import javax.imageio.*; 
import javax.swing.*; class Server
{
public static void main(String args[]) throws Exception
{
ServerSocket server=null; Socket socket;
server=new ServerSocket(4000); 
System.out.println("Server Waiting for image");
socket=server.accept(); 
System.out.println("Client connected."); InputStream in =	socket.getInputStream();
	DataInputStream dis = new DataInputStream(in);
	int len = dis.readInt();
	System.out.println("Image Size: " + len/1024 + "KB"); 
byte[] data = new byte[len];
	dis.readFully(data);
	dis.close();
	in.close();
	InputStream ian = new ByteArrayInputStream(data);
	BufferedImage bImage = ImageIO.read(ian);
	JFrame f = new JFrame("Server");
	ImageIcon icon = new ImageIcon(bImage);
	JLabel l = new JLabel();
	l.setIcon(icon);
	f.add(l);
	f.pack();
	f.setVisible(true);

}	}	









Ex.No:	 7	Develop a DNS client server to resolve the given host name or IP address

PROGRAM:

DNS Server
java import java.io.*; import java.net.*;
public class udpdnsserver
{
private static int indexOf(String[] array, String str)
{
str = str.trim();
for (int i=0; i < array.length; i++)
{
if (array[i].equals(str)) return i;
}
return -1;
}
public static void main(String arg[])throws IOExceptio
{
String[] hosts = {"yahoo.com", "gmail.com","cricinfo.com", "facebook.com"}; 
String[] ip = {"68.180.206.184", "209.85.148.19","80.168.92.140", "69.63.189.16"};
System.out.println("Press Ctrl + C to Quit"); while (true)
{
DatagramSocket serversocket=new DatagramSocket(1362); 
byte[] senddata = new byte[1021];
byte[] receivedata = new byte[1021];
DatagramPacket recvpack = new DatagramPacket(receivedata, receivedata.length); 
serversocket.receive(recvpack);
String sen = new String(recvpack.getData());
InetAddress ipaddress = recvpack.getAddress(); 
int port = recvpack.getPort();
String capsent;
System.out.println("Request for host " + sen); if(indexOf (hosts, sen) != -1)
capsent = ip[indexOf (hosts, sen)];
else
capsent = "Host Not Found";
senddata = capsent.getBytes();
DatagramPacket pack = new DatagramPacket (senddata, senddata.length,ipaddress,port); 
serversocket.send(pack);
serversocket.close();
}}}


UDP DNS Client java 
import java.io.*; 
import java.net.*;
public class udpdnsclient
{
public static void main(String args[])throws IOException
{
BufferedReader br = new BufferedReader(new InputStreamReader(System.in)); 
DatagramSocket clientsocket = new DatagramSocket();
InetAddress ipaddress; if (args.length == 0)
ipaddress = InetAddress.getLocalHost();
else
ipaddress = InetAddress.getByName(args[0]); 
byte[] senddata = new byte[1024];
byte[] receivedata = new byte[1024]; int portaddr = 1362;
System.out.print("Enter the hostname : "); 
String sentence = br.readLine();
Senddata = sentence.getBytes();
DatagramPacket pack = new DatagramPacket(senddata,senddata.length,
clientsocket.send(pack);
DatagramPacket recvpack =new DatagramPacket(receivedata,receivedata.length); 
clientsocket.receive(recvpack);
String modified = new String(recvpack.getData()); 
System.out.println("IP Address: " + modified); clientsocket.close();

}}

OUTPUT
Server
javac udpdnsserver.java java udpdnsserver
Press Ctrl + C to Quit Request for host yahoo.com Request for host cricinfo.com
Request for host youtube.com

Client
>javac udpdnsclient.java
>java udpdnsclient
Enter the hostname : yahoo.com IP Address: 68.180.206.184
>java udpdnsclient
Enter the hostname : cricinfo.com IP Address: 80.168.92.140
>java udpdnsclient
Enter the hostname : youtube.com IP Address: Host Not Found









Ex.No: 8           Simulation of unicast routing protocols

PROGRAM:
set ns [new Simulator]
#Define different colors for data flows (for NAM)
$ns color 1 Blue
$ns color 2 Red #Open the Trace file
set file1 [open out.tr w]
$ns trace-all $file1
#Open the NAM trace file set file2 [open out.nam w]
$ns namtrace-all $file2 #Define a 'finish' procedure proc finish {} {
global ns file1 file2
$ns flush-trace close $file1 close $file2
exec nam out.nam &

exit 3
}
# Next line should be commented out to have the static routing
$ns rtproto DV 
#Create six nodes 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3[$ns node]
set n4 [$ns node] 
set n5 [$ns node]
#Create links between the nodes
$ns duplex-link $n0 $n1 0.3Mb 10ms DropTail
$ns duplex-link $n1 $n2 0.3Mb 10ms DropTail
$ns duplex-link $n2 $n3 0.3Mb 10ms DropTail
$ns duplex-link $n1 $n4 0.3Mb 10ms DropTail
$ns duplex-link $n3 $n5 0.5Mb 10ms DropTail
$ns duplex-link $n4 $n5 0.5Mb 10ms DropTail

#Give node position (for NAM)
$ns duplex-link-op $n0 $n1 orient right

$ns duplex-link-op $n1 $n2 orient right
$ns duplex-link-op $n2 $n3 orient up
$ns duplex-link-op $n1 $n4 orient up-left
$ns duplex-link-op $n3 $n5 orient left-up
$ns duplex-link-op $n4 $n5 orient right-up

#Setup a TCP connection
set tcp [new Agent/TCP/Newreno]
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink/DelAck]
$ns attach-agent $n5 $sink
$ns connect $tcp $sink
$tcp set fid_ 1

#Setup a FTP over TCP connection set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP

$ns rtmodel-at 1.0 down $n1 $n4
$ns rtmodel-at 4.5 up $n1 $n4
$ns at 0.1 "$ftp start"
$ns at 6.0 "finish"
$ns run



Ex.No: 9	Observing Packets across the network and Performance Analysis of various Routing protocols

PROGRAM:
DISTANCE VECTOR ROUTING ALGORITHM

PROGRAM
#Distance vector routing protocol – distvect.tcl #Create a simulator object
set ns [new Simulator]
#Use distance vector routing
$ns rtproto DV
#Open the nam trace file set nf [open out.nam w]
$ns namtrace-all $nf # Open tracefile
set nt [open trace.tr w]
$ns trace-all $nt
#Define 'finish' procedure
proc finish {} {
global ns nf
$ns flush-trace #Close the trace file close $nf
#Execute nam on the trace file exec nam -a out.nam &
exit 0
}
# Create 8 nodes 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node] 
set n4 [$ns node] 
set n5 [$ns node] 
set n6 [$ns node] 
set n7 [$ns node] 
set n8 [$ns node]
# Specify link characterestics
$ns duplex-link $n1 $n2 1Mb 10ms DropTail
$ns duplex-link $n2 $n3 1Mb 10ms DropTail
$ns duplex-link $n3 $n4 1Mb 10ms DropTail
$ns duplex-link $n4 $n5 1Mb 10ms DropTail
$ns duplex-link $n5 $n6 1Mb 10ms DropTail
$ns duplex-link $n6 $n7 1Mb 10ms DropTail
$ns duplex-link $n7 $n8 1Mb 10ms DropTail
$ns duplex-link $n8 $n1 1Mb 10ms DropTail # specify layout as a octagon
$ns duplex-link-op $n1 $n2 orient left-up

$ns duplex-link-op $n2 $n3 orient up
$ns duplex-link-op $n3 $n4 orient right-up
$ns duplex-link-op $n4 $n5 orient right
$ns duplex-link-op $n5 $n6 orient right-down
$ns duplex-link-op $n6 $n7 orient down
$ns duplex-link-op $n7 $n8 orient left-down
$ns duplex-link-op $n8 $n1 orient left 
#Create a UDP agent and attach it to node n1 set udp0 [new Agent/UDP]
$ns attach-agent $n1 $udp0
#Create a CBR traffic source and attach it to udp0
set cbr0 [new Application/Traffic/CBR]
$cbr0 set packetSize_ 500
$cbr0 set interval_ 0.005
$cbr0 attach-agent $udp0
#Create a Null agent (a traffic sink) and attach it to node n4 
set null0 [new Agent/Null]
$ns attach-agent $n4 $null0
#Connect the traffic source with the traffic sink
$ns connect $udp0 $null0
#Schedule events for the CBR agent and the network dynamics
$ns at 0.0 "$n1 label Source"
$ns at 0.0 "$n4 label Destination"
$ns at 0.5 "$cbr0 start"
$ns rtmodel-at 1.0 down $n3 $n4
$ns rtmodel-at 2.0 up $n3 $n4
$ns at 4.5 "$cbr0 stop"
#Call the finish procedure after 5 seconds of simulation time
$ns at 5.0 "finish" #Run the simulation
$ns run





EX.NO:9 b  LINK STATE ROUTING ALGORITHM

PROGRAM:

set ns [new Simulator]

#Define different colors for data flows (for NAM)
$ns color 1 Blue
$ns color 2 Red

#Open the Trace file
set file1 [open routing2.tr w]
$ns trace-all $file1

#Open the NAM trace file
set file2 [open routing2.nam w]
$ns namtrace-all $file2

#Define a 'finish' procedure
 proc finish {} {
global ns file1 file2
$ns flush-trace
close $file1 close $file2
exec nam routing2.nam & exit 0
}

# Next line should be commented out to have the static routing
$ns rtproto LS

#Create six nodes 
set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node] 
set n4 [$ns node] 
set n5 [$ns node]

#Create links between the nodes
$ns duplex-link $n0 $n1 0.3Mb 10ms DropTail
$ns duplex-link $n1 $n2 0.3Mb 10ms DropTail
$ns duplex-link $n2 $n3 0.3Mb 10ms DropTail
$ns duplex-link $n1 $n4 0.3Mb 10ms DropTail
$ns duplex-link $n3 $n5 0.5Mb 10ms DropTail
$ns duplex-link $n4 $n5 0.5Mb 10ms DropTail

#Give node position (for NAM)

$ns duplex-link-op  $n0 $n1 orient right
$ns duplex-link-op  $n1 $n2 orient right
$ns duplex-link-op $n2 $n3 orient up-down
$ns duplex-link-op $n1 $n4 orient up-left
$ns duplex-link-op  $n3 $n5 orient left-up
$ns duplex-link-op  $n4 $n5 orient right-up

#Setup a TCP connection
set tcp [new Agent/TCP/Newreno]
$ns attach-agent $n0 $tcp
set sink [new Agent/TCPSink/DelAck]
$ns attach-agent $n5 $sink
$ns connect $tcp $sink
$tcp set fid_ 1

#Setup a FTP over TCP connection set ftp [new Application/FTP]
$ftp attach-agent $tcp
$ftp set type_ FTP

$ns rtmodel-at 1.0 down $n1 $n4
$ns rtmodel-at 3.0 up $n1 $n4

$ns at 0.1 "$ftp start"
$ns at 6.0 "finish"
$ns run





Ex.No: 10         Simulation of Transport layer Protocols and analysis of congestion control techniques in the network


PROGRAM:

set ns [new Simulator]

set nr [open thro_red.tr w]

$ns trace-all $nr

set nf [open thro.nam w]

$ns namtrace-all
$nf proc finish { } {
global ns nr nf
$ns flush-trace close
$nf close
$nr
exec nam thro.nam &
 exit 0
}

set n0 [$ns node] 
set n1 [$ns node] 
set n2 [$ns node] 
set n3 [$ns node]
 set n4 [$ns node] 
set n5 [$ns node] 
set n6 [$ns node] 
set n7 [$ns node]
$ns duplex-link $n0 $n3 1Mb 10ms RED

$ns duplex-link $n1 $n3 1Mb 10ms RED

$ns duplex-link $n2 $n3 1Mb 10ms RED

$ns duplex-link $n3 $n4 1Mb 10ms RED

$ns duplex-link $n4 $n5 1Mb 10ms RED

$ns duplex-link $n4 $n6 1Mb 10ms RED

$ns duplex-link $n4 $n7 1Mb 10ms RED

$ns duplex-link-op $n0 $n3 orient right-up

$ns duplex-link-op $n3 $n4 orient middle

$ns duplex-link-op $n2 $n3 orient right-down

$ns duplex-link-op $n4 $n5 orient right-up

$ns duplex-link-op $n4 $n7 orient right-down

$ns duplex-link-op $n1 $n3 orient right

$ns duplex-link-op $n6 $n4orient left
set udp0 [new Agent/UDP]
$ns attach-agent $n2 $udp0

set cbr0 [new Application/Traffic/CBR]
$cbr0 set packetSize_ 500

$cbr0 set interval_ 0.005

$cbr0 attach-agent
$udp0 set null0 [new Agent/Null]
$ns attach-agent $n5 $null0

$ns connect $udp0
$null0 set udp1 [new Agent/UDP]
$ns attach-agent $n1 $udp1

set cbr1 [new Application/Traffic/CBR]

$cbr1 set packetSize_ 500
$cbr1 set interval_ 0.005
$cbr1 attach-agent
$udp1 set null0 [new Agent/Null]
$ns attach-agent $n6 $null0
$ns connect $udp1
$null0 set udp2 [new Agent/UDP]
$ns attach-agent $n0 $udp2
set cbr2 [new Application/Traffic/CBR]
$cbr2 set packet size_ 500
$cbr2 set interval_ 0.005
$cbr2 attach-agent
$udp2 set null0
[new Agent/Null]
$ns attach-agent $n7 $null0

$ns connect $udp2 $null0
$udp0 set fid_ 1
$udp1 set fid_ 2
$udp2 set fid_ 3
$ns color 1 Red
$ns color 2 Green
$ns color 2 Blue
$ns at 0.1 "$cbr0 start"
$ns at 0.2 "$cbr1 start"
$ns at 0.5 "$cbr2 start"
$ns at 4.0 "$cbr2 stop"
$ns at 4.2 "$cbr1 stop"
$ns at 4.5 "$cbr0 stop"
$ns at 5.0 "finish"
$ns run





